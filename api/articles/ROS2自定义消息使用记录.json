{"title":"ROS2自定义消息使用记录","slug":"ROS2自定义消息使用记录","date":"2023-04-01T15:35:11.000Z","updated":"2023-04-01T16:23:21.027Z","comments":true,"path":"api/articles/ROS2自定义消息使用记录.json","excerpt":null,"covers":null,"content":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近在做人体姿态估计的项目,需要用到ROS2,但是ROS2的消息类型不够用,所以需要自定义消息类型,这里记录一下自定义消息类型的过程.</p>\n<p>使用的工具如下</p>\n<ul>\n<li>ROS2 Humble</li>\n<li>VSCode</li>\n<li>Alphapose</li>\n</ul>\n<p>之前跟着官方文档做过一次,但是学会了,但又没学会.这次是真的要用,反而出问题了.</p>\n<h2 id=\"自定义消息类型\"><a href=\"#自定义消息类型\" class=\"headerlink\" title=\"自定义消息类型\"></a>自定义消息类型</h2><p>之前以为每个包里面都可以自定义消息,但是想多了,需要独立的包来存放自定义消息.</p>\n<h3 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ros2 pkg create --build-type ament_python --node-name people_msgs people_msgs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建消息\"><a href=\"#创建消息\" class=\"headerlink\" title=\"创建消息\"></a>创建消息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Point.msg</span></span><br><span class=\"line\">float32 x</span><br><span class=\"line\">float32 y</span><br><span class=\"line\">float32 z</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># People.msg 以为人体关键点是26个,所以这里就写26个,但是后面发现出了问题</span></span><br><span class=\"line\">Point[26] keypoints</span><br></pre></td></tr></table></figure>\n<p>记住这个26,问题就出在这里.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PeopleArray.msg</span></span><br><span class=\"line\">People[] people</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colcon build --packages-select people_msgs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> install/setup.bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用自定义消息\"><a href=\"#使用自定义消息\" class=\"headerlink\" title=\"使用自定义消息\"></a>使用自定义消息</h2><h3 id=\"创建包-1\"><a href=\"#创建包-1\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ros2 pkg create --build-type ament_python --node-name people_sub people_sub</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># people_sub.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> rclpy</span><br><span class=\"line\"><span class=\"keyword\">from</span> rclpy.node <span class=\"keyword\">import</span> Node</span><br><span class=\"line\"><span class=\"keyword\">from</span> people_msgs.msg <span class=\"keyword\">import</span> PeopleArray</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PeopleSub</span>(<span class=\"title class_ inherited__\">Node</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&#x27;people_sub&#x27;</span>)</span><br><span class=\"line\">        self.sub = self.create_subscription(PeopleArray, <span class=\"string\">&#x27;people&#x27;</span>, self.people_callback, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">people_callback</span>(<span class=\"params\">self, msg</span>):</span><br><span class=\"line\">        self.get_logger().info(<span class=\"string\">&#x27;I heard: %s&#x27;</span> % msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getnode</span>(<span class=\"params\">self</span>): <span class=\"comment\"># 假如说这是识别后处理关键点的函数</span></span><br><span class=\"line\">        peoplearray = PeopleArray()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> peoplelist: <span class=\"comment\"># 假如说这是识别后所有人的列表</span></span><br><span class=\"line\">            people = People()</span><br><span class=\"line\">            <span class=\"comment\"># people.keypoints.clear() # 这里是关键,不然会出问题</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i: <span class=\"comment\">#每个人身上的关键点</span></span><br><span class=\"line\">                point = Point()</span><br><span class=\"line\">                point.x = j[<span class=\"number\">0</span>]</span><br><span class=\"line\">                point.y = j[<span class=\"number\">1</span>]</span><br><span class=\"line\">                point.z = j[<span class=\"number\">2</span>]</span><br><span class=\"line\">                people.keypoints.append(point)</span><br><span class=\"line\">            peoplearray.people.append(people)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> peoplearray</span><br><span class=\"line\">        </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    rclpy.init(args=args)</span><br><span class=\"line\">    people_sub = PeopleSub()</span><br><span class=\"line\">    rclpy.spin(people_sub)</span><br><span class=\"line\">    people_sub.destroy_node()</span><br><span class=\"line\">    rclpy.shutdown()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colcon build --packages-select people_sub</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> install/setup.bash</span><br><span class=\"line\">ros2 run people_sub people_sub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我使用自定义消息进行接收,发现接收到的消息是空的,后来发现是因为我在创建消息的时候,它会默认创建一个空的消息(26个数据都是0),所以我在创建消息的时候,需要先清空消息,然后再添加数据.</p>\n<h2 id=\"感悟\"><a href=\"#感悟\" class=\"headerlink\" title=\"感悟\"></a>感悟</h2><p>果然<em>实践是检验真理的唯一标准</em></p>\n<p>这次的问题是单步调试出来的,调试之前处理了python路径的问题,不然无法使用VSCode调试.</p>\n<h3 id=\"python扩展路径问题\"><a href=\"#python扩展路径问题\" class=\"headerlink\" title=\"python扩展路径问题\"></a>python扩展路径问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.通过脚本查看python路径</span></span><br><span class=\"line\">python -c <span class=\"string\">&quot;import sys; print(sys.path)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>设置环境vscode路径</p>\n<p>Python扩展 设置 -&gt; Pythoninterpreter Path -&gt; (&#x2F;usr&#x2F;bin&#x2F;python3)换成上一步的路径即可解决</p>\n<p>还有个问题我问了下GPT</p>\n<h3 id=\"ROS2使用自定义Python解释器\"><a href=\"#ROS2使用自定义Python解释器\" class=\"headerlink\" title=\"ROS2使用自定义Python解释器\"></a>ROS2使用自定义Python解释器</h3><p>要指定ROS 2使用的Python解释器，您可以设置环境变量PYTHON_EXECUTABLE，将其设置为要使用的Python解释器的路径。例如，假设您的自定义Python解释器位于&#x2F;path&#x2F;to&#x2F;my&#x2F;python，则可以使用以下命令在终端中设置环境变量：</p>\n<p><code>export PYTHON_EXECUTABLE=/path/to/my/python</code></p>\n<p>设置环境变量后，ROS 2将使用指定的Python解释器。您可以在启动ROS 2节点时验证Python解释器是否正确设置，例如：</p>\n<p><code>ros2 run my_package my_node --ros-args --log-level debug</code></p>\n<p>这将在终端输出ROS 2节点的日志信息，其中包括使用的Python解释器。如果您看到的输出中包含您自定义的Python解释器路径，则表示ROS 2正在使用指定的Python解释器。</p>\n<p>注意，设置自定义Python解释器可能会导致ROS 2某些功能无法正常工作，因为ROS 2可能依赖于特定版本的Python和Python库。如果您遇到问题，请尝试使用ROS 2默认的Python解释器，或者确保您的自定义Python解释器与ROS 2所需的Python版本和库兼容。</p>\n","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>最近在做人体姿态估计的项目,需要用到ROS2,但是ROS2的消息类型不够用,所以需要自定义消息类型,这里记录一下自定义消息类型的过程.</p>\n<p>使用的工具如下</p>\n<ul>\n<li>ROS2 Humble</li>\n<li>VSCode</li>\n<li>Alphapose</li>\n</ul>\n<p>之前跟着官方文档做过一次,但是学会了,但又没学会.这次是真的要用,反而出问题了.</p>\n<h2 id=\"自定义消息类型\"><a href=\"#自定义消息类型\" class=\"headerlink\" title=\"自定义消息类型\"></a>自定义消息类型</h2><p>之前以为每个包里面都可以自定义消息,但是想多了,需要独立的包来存放自定义消息.</p>\n<h3 id=\"创建包\"><a href=\"#创建包\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ros2 pkg create --build-type ament_python --node-name people_msgs people_msgs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建消息\"><a href=\"#创建消息\" class=\"headerlink\" title=\"创建消息\"></a>创建消息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Point.msg</span></span><br><span class=\"line\">float32 x</span><br><span class=\"line\">float32 y</span><br><span class=\"line\">float32 z</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># People.msg 以为人体关键点是26个,所以这里就写26个,但是后面发现出了问题</span></span><br><span class=\"line\">Point[26] keypoints</span><br></pre></td></tr></table></figure>\n<p>记住这个26,问题就出在这里.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PeopleArray.msg</span></span><br><span class=\"line\">People[] people</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colcon build --packages-select people_msgs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> install/setup.bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用自定义消息\"><a href=\"#使用自定义消息\" class=\"headerlink\" title=\"使用自定义消息\"></a>使用自定义消息</h2><h3 id=\"创建包-1\"><a href=\"#创建包-1\" class=\"headerlink\" title=\"创建包\"></a>创建包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ros2 pkg create --build-type ament_python --node-name people_sub people_sub</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># people_sub.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> rclpy</span><br><span class=\"line\"><span class=\"keyword\">from</span> rclpy.node <span class=\"keyword\">import</span> Node</span><br><span class=\"line\"><span class=\"keyword\">from</span> people_msgs.msg <span class=\"keyword\">import</span> PeopleArray</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PeopleSub</span>(<span class=\"title class_ inherited__\">Node</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&#x27;people_sub&#x27;</span>)</span><br><span class=\"line\">        self.sub = self.create_subscription(PeopleArray, <span class=\"string\">&#x27;people&#x27;</span>, self.people_callback, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">people_callback</span>(<span class=\"params\">self, msg</span>):</span><br><span class=\"line\">        self.get_logger().info(<span class=\"string\">&#x27;I heard: %s&#x27;</span> % msg)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getnode</span>(<span class=\"params\">self</span>): <span class=\"comment\"># 假如说这是识别后处理关键点的函数</span></span><br><span class=\"line\">        peoplearray = PeopleArray()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> peoplelist: <span class=\"comment\"># 假如说这是识别后所有人的列表</span></span><br><span class=\"line\">            people = People()</span><br><span class=\"line\">            <span class=\"comment\"># people.keypoints.clear() # 这里是关键,不然会出问题</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> i: <span class=\"comment\">#每个人身上的关键点</span></span><br><span class=\"line\">                point = Point()</span><br><span class=\"line\">                point.x = j[<span class=\"number\">0</span>]</span><br><span class=\"line\">                point.y = j[<span class=\"number\">1</span>]</span><br><span class=\"line\">                point.z = j[<span class=\"number\">2</span>]</span><br><span class=\"line\">                people.keypoints.append(point)</span><br><span class=\"line\">            peoplearray.people.append(people)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> peoplearray</span><br><span class=\"line\">        </span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>(<span class=\"params\">args=<span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    rclpy.init(args=args)</span><br><span class=\"line\">    people_sub = PeopleSub()</span><br><span class=\"line\">    rclpy.spin(people_sub)</span><br><span class=\"line\">    people_sub.destroy_node()</span><br><span class=\"line\">    rclpy.shutdown()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译-1\"><a href=\"#编译-1\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">colcon build --packages-select people_sub</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> install/setup.bash</span><br><span class=\"line\">ros2 run people_sub people_sub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我使用自定义消息进行接收,发现接收到的消息是空的,后来发现是因为我在创建消息的时候,它会默认创建一个空的消息(26个数据都是0),所以我在创建消息的时候,需要先清空消息,然后再添加数据.</p>\n<h2 id=\"感悟\"><a href=\"#感悟\" class=\"headerlink\" title=\"感悟\"></a>感悟</h2><p>果然<em>实践是检验真理的唯一标准</em></p>\n<p>这次的问题是单步调试出来的,调试之前处理了python路径的问题,不然无法使用VSCode调试.</p>\n<h3 id=\"python扩展路径问题\"><a href=\"#python扩展路径问题\" class=\"headerlink\" title=\"python扩展路径问题\"></a>python扩展路径问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.通过脚本查看python路径</span></span><br><span class=\"line\">python -c <span class=\"string\">&quot;import sys; print(sys.path)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>设置环境vscode路径</p>\n<p>Python扩展 设置 -&gt; Pythoninterpreter Path -&gt; (&#x2F;usr&#x2F;bin&#x2F;python3)换成上一步的路径即可解决</p>\n<p>还有个问题我问了下GPT</p>\n<h3 id=\"ROS2使用自定义Python解释器\"><a href=\"#ROS2使用自定义Python解释器\" class=\"headerlink\" title=\"ROS2使用自定义Python解释器\"></a>ROS2使用自定义Python解释器</h3><p>要指定ROS 2使用的Python解释器，您可以设置环境变量PYTHON_EXECUTABLE，将其设置为要使用的Python解释器的路径。例如，假设您的自定义Python解释器位于&#x2F;path&#x2F;to&#x2F;my&#x2F;python，则可以使用以下命令在终端中设置环境变量：</p>\n<p><code>export PYTHON_EXECUTABLE=/path/to/my/python</code></p>\n<p>设置环境变量后，ROS 2将使用指定的Python解释器。您可以在启动ROS 2节点时验证Python解释器是否正确设置，例如：</p>\n<p><code>ros2 run my_package my_node --ros-args --log-level debug</code></p>\n<p>这将在终端输出ROS 2节点的日志信息，其中包括使用的Python解释器。如果您看到的输出中包含您自定义的Python解释器路径，则表示ROS 2正在使用指定的Python解释器。</p>\n<p>注意，设置自定义Python解释器可能会导致ROS 2某些功能无法正常工作，因为ROS 2可能依赖于特定版本的Python和Python库。如果您遇到问题，请尝试使用ROS 2默认的Python解释器，或者确保您的自定义Python解释器与ROS 2所需的Python版本和库兼容。</p>\n","categories":[],"tags":[]}